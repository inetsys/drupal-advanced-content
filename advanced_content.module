<?php

/** Implementation of hook_init */
function advanced_content_init(){
	// Disable view menu_existing_content_selection if module content_menu is active
	$defaults = variable_get('views_defaults', array());
	if(module_exists('content_menu') && (!isset($defaults['menu_existing_content_selection']) || !$defaults['menu_existing_content_selection'])){
		$defaults['menu_existing_content_selection'] = true;
		variable_set('views_defaults', $defaults);
	}
}

/** Implementation of hook_menu */
function advanced_content_menu(){
	$items = array();

	if(module_exists('content_menu')){
		$items['admin/structure/menu/manage/add_existing_content'] = array(
			'title' => 'Select existing content',
			'access arguments' => array('administer content'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('_advanced_content_select_content'),
			'file' => 'advanced_content.admin.inc'
		);
	}

	return $items;
}

/** Implementation of hook_menu_alter */
function advanced_content_menu_alter(&$items){
	$items['admin/content']['page arguments'] = array('_advanced_content_admin_page');
	$items['admin/content']['file'] = 'advanced_content.admin.inc';
	$items['admin/content']['file path'] = drupal_get_path('module', 'advanced_content');
}

/** Implementation of hook_node_filter */
function advanced_content_node_filter(){
	$default_filters = isset($_SESSION['admin_node_filters']) ? $_SESSION['admin_node_filters'] : array();

	$type_options = array_merge(array('' => '-'), node_type_get_names());
	$published_options = array(
		'' => '-',
		0 => t('No'),
		1 => t('Yes')
	);

	return 	array(
		'type' => array(
			'#type' => 'select',
			'#title' => t('Content type'),
			'#options' => $type_options,
			'#default_value' => isset($default_filters['type']) ? $default_filters['type'] : '',
		),
		'status' => array(
			'#type' => 'select',
			'#title' => t('Published'),
			'#options' => $published_options,
			'#default_value' => isset($default_filters['status']) ? $default_filters['status'] : '',
		),
		'title' => array(
			'#type' => 'textfield',
			'#title' => t('Title'),
			'#default_value' => isset($default_filters['title']) ? $default_filters['title'] : ''
		),
	);
}

/** Implementation of hook_entity_query_alter */
function advanced_content_entity_query_alter($query){
	if(in_array('node_admin_filter', $query->tags) && isset($_SESSION['admin_node_filters'])){
		if(isset($_SESSION['admin_node_filters']['type'])){
			$query->propertyCondition('type', $_SESSION['admin_node_filters']['type']);
		}
		if(isset($_SESSION['admin_node_filters']['status'])){
			$query->propertyCondition('status', $_SESSION['admin_node_filters']['status']);
		}
		if(isset($_SESSION['admin_node_filters']['title'])){
			$query->propertyCondition('title', $_SESSION['admin_node_filters']['title'], 'CONTAINS');
		}
	}
}

/** Implementation of hook_query_TAG_alter
 * Tag: node_admin_filter
 */
function advanced_content_query_node_admin_filter_alter($query){
	if(!user_access('bypass node access')){
		if(user_access('view own unpublished content')){
			$query->condition(db_or()
				->condition('node.status', NODE_PUBLISHED)
				->condition('node.uid', $GLOBALS['user']->uid)
			);
		}else{
			// If not, restrict the query to published nodes.
			$query->condition('node.status', NODE_PUBLISHED);
		}
	}
}